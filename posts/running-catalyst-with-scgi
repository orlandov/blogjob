One of the great things about Catalyst is that you can deploy it in a number
of different ways. As of this post, there are a few popular ways of deploying
a Catalyst application:

### mod_perl

mod_perl enables you to embed the Perl interpreter directly in your webserver.
This has been the traditional way of deploying perl web applications,
typically with the old standby, Apache. Embedding the perl interpreter in the
webserver is a fundamentally flawed way tackling the problem for number of
reasons. Apache is big, and Perl is big. Each worker needs a copy of the Perl
interpreter, which could consume a lot of resources. That's not even counting
all the packages your application will need to run. In a nutshell, the
webserver should be secure, small, only serving or forwarding requests. It
should not be doing any heavy lifting.

See: [mod_perl](http://en.wikipedia.org/wiki/Mod_perl)

### FastCGI

FastCGI is another popular solution (probably the most popular), as it
side steps the problem of embedding the interpreter. How it does this is by
starting a FastCGI daemon that accepts connetions from an upstream server
and proxies information to and from the web application, through an
interface similar to CGI. Most current web servers support FastCGI out of
the box or with a bit of tweaking. This isn't a terrible solution but has
one problem: FastCGI is a *really* complicated binary protocol. I will admit
that I'm not a FastCGI expert, but I like knowing how my software works
under the hood.

Behold the [FastCGI spec](http://www.fastcgi.com/devkit/doc/fcgi-spec.html)

### SCGI

SCGI stands for Simple Common Gateway Interface. Conceptually it's quite
similar to FastCGI. You launch a daemon that is external to the webserver, and
talk to the web application via a socket. The great thing is that writing or
maintaining an implementation SCGI interface and engine is order of magnitudes
easier to do than FastCGI. As proof, contrast the protocol specifications for
FastCGI and SCGI. All things being equal (performance, resource utilization) I
would much prefer a simpler solution.

The [SCGI spec](http://python.ca/scgi/protocol.txt)

#### Deploying Catalyst with the Cherokee webserver

[Catalyst-SCGI-Engine](http://github.com/orlandov/Catalyst-Engine-SCGI/tree/master)
